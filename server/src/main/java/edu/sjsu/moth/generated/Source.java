// THIS FILE WAS GENERATED BY JSON2JAVA
// CHANGES MADE:
//   * use AccountField instead of Field

package edu.sjsu.moth.generated;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import edu.sjsu.moth.server.db.AccountField;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({ "privacy", "sensitive", "language", "note", "fields", "follow_requests_count" })
public class Source {

    @JsonProperty("privacy")
    public String privacy;
    @JsonProperty("sensitive")
    public Boolean sensitive;
    @JsonProperty("language")
    public String language;
    @JsonProperty("note")
    public String note;
    @JsonProperty("fields")
    public List<AccountField> fields = new ArrayList<AccountField>();
    @JsonProperty("follow_requests_count")
    public Integer followRequestsCount;

    /**
     * No args constructor for use in serialization
     */
    public Source() {
    }

    public Source(String privacy, Boolean sensitive, String language, String note, List<AccountField> fields,
                  Integer followRequestsCount) {
        super();
        this.privacy = privacy;
        this.sensitive = sensitive;
        this.language = language;
        this.note = note;
        this.fields = fields;
        this.followRequestsCount = followRequestsCount;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(Source.class.getName())
                .append('@')
                .append(Integer.toHexString(System.identityHashCode(this)))
                .append('[');
        sb.append("privacy");
        sb.append('=');
        sb.append(((this.privacy == null) ? "<null>" : this.privacy));
        sb.append(',');
        sb.append("sensitive");
        sb.append('=');
        sb.append(((this.sensitive == null) ? "<null>" : this.sensitive));
        sb.append(',');
        sb.append("language");
        sb.append('=');
        sb.append(((this.language == null) ? "<null>" : this.language));
        sb.append(',');
        sb.append("note");
        sb.append('=');
        sb.append(((this.note == null) ? "<null>" : this.note));
        sb.append(',');
        sb.append("fields");
        sb.append('=');
        sb.append(((this.fields == null) ? "<null>" : this.fields));
        sb.append(',');
        sb.append("followRequestsCount");
        sb.append('=');
        sb.append(((this.followRequestsCount == null) ? "<null>" : this.followRequestsCount));
        sb.append(',');
        if (sb.charAt((sb.length() - 1)) == ',') {
            sb.setCharAt((sb.length() - 1), ']');
        } else {
            sb.append(']');
        }
        return sb.toString();
    }

    @Override
    public int hashCode() {
        int result = 1;
        result = ((result * 31) + ((this.note == null) ? 0 : this.note.hashCode()));
        result = ((result * 31) + ((this.privacy == null) ? 0 : this.privacy.hashCode()));
        result = ((result * 31) + ((this.language == null) ? 0 : this.language.hashCode()));
        result = ((result * 31) + ((this.followRequestsCount == null) ? 0 : this.followRequestsCount.hashCode()));
        result = ((result * 31) + ((this.sensitive == null) ? 0 : this.sensitive.hashCode()));
        result = ((result * 31) + ((this.fields == null) ? 0 : this.fields.hashCode()));
        return result;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if (!(other instanceof Source rhs)) {
            return false;
        }
        return ((((((Objects.equals(this.note, rhs.note)) && (Objects.equals(this.privacy,
                                                                             rhs.privacy))) && (Objects.equals(
                this.language, rhs.language))) && (Objects.equals(this.followRequestsCount,
                                                                  rhs.followRequestsCount))) && (Objects.equals(
                this.sensitive, rhs.sensitive))) && (Objects.equals(this.fields, rhs.fields)));
    }

}
