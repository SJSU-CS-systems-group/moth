
// THIS FILE WAS GENERATED BY JSON2JAVA
// IT HAS NOT BEEN CHANGED. (IF IT HAS REMOVE THIS LINE)
// CHANGES MADE:
//   * NONE SO FAR


package edu.sjsu.moth.generated;

import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "id",
    "phrase",
    "context",
    "whole_word",
    "expires_at",
    "irreversible"
})
public class Filter {

    @JsonProperty("id")
    public String id;
    @JsonProperty("phrase")
    public String phrase;
    @JsonProperty("context")
    public List<String> context = new ArrayList<String>();
    @JsonProperty("whole_word")
    public Boolean wholeWord;
    @JsonProperty("expires_at")
    public String expiresAt;
    @JsonProperty("irreversible")
    public Boolean irreversible;

    /**
     * No args constructor for use in serialization
     * 
     */
    public Filter() {
    }

    public Filter(String id, String phrase, List<String> context, Boolean wholeWord, String expiresAt, Boolean irreversible) {
        super();
        this.id = id;
        this.phrase = phrase;
        this.context = context;
        this.wholeWord = wholeWord;
        this.expiresAt = expiresAt;
        this.irreversible = irreversible;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(Filter.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
        sb.append("id");
        sb.append('=');
        sb.append(((this.id == null)?"<null>":this.id));
        sb.append(',');
        sb.append("phrase");
        sb.append('=');
        sb.append(((this.phrase == null)?"<null>":this.phrase));
        sb.append(',');
        sb.append("context");
        sb.append('=');
        sb.append(((this.context == null)?"<null>":this.context));
        sb.append(',');
        sb.append("wholeWord");
        sb.append('=');
        sb.append(((this.wholeWord == null)?"<null>":this.wholeWord));
        sb.append(',');
        sb.append("expiresAt");
        sb.append('=');
        sb.append(((this.expiresAt == null)?"<null>":this.expiresAt));
        sb.append(',');
        sb.append("irreversible");
        sb.append('=');
        sb.append(((this.irreversible == null)?"<null>":this.irreversible));
        sb.append(',');
        if (sb.charAt((sb.length()- 1)) == ',') {
            sb.setCharAt((sb.length()- 1), ']');
        } else {
            sb.append(']');
        }
        return sb.toString();
    }

    @Override
    public int hashCode() {
        int result = 1;
        result = ((result* 31)+((this.wholeWord == null)? 0 :this.wholeWord.hashCode()));
        result = ((result* 31)+((this.phrase == null)? 0 :this.phrase.hashCode()));
        result = ((result* 31)+((this.context == null)? 0 :this.context.hashCode()));
        result = ((result* 31)+((this.irreversible == null)? 0 :this.irreversible.hashCode()));
        result = ((result* 31)+((this.id == null)? 0 :this.id.hashCode()));
        result = ((result* 31)+((this.expiresAt == null)? 0 :this.expiresAt.hashCode()));
        return result;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Filter) == false) {
            return false;
        }
        Filter rhs = ((Filter) other);
        return (((((((this.wholeWord == rhs.wholeWord)||((this.wholeWord!= null)&&this.wholeWord.equals(rhs.wholeWord)))&&((this.phrase == rhs.phrase)||((this.phrase!= null)&&this.phrase.equals(rhs.phrase))))&&((this.context == rhs.context)||((this.context!= null)&&this.context.equals(rhs.context))))&&((this.irreversible == rhs.irreversible)||((this.irreversible!= null)&&this.irreversible.equals(rhs.irreversible))))&&((this.id == rhs.id)||((this.id!= null)&&this.id.equals(rhs.id))))&&((this.expiresAt == rhs.expiresAt)||((this.expiresAt!= null)&&this.expiresAt.equals(rhs.expiresAt))));
    }

}
