
// THIS FILE WAS GENERATED BY JSON2JAVA
// CHANGES MADE:
//   * imported the Account Class
//   * inReplyToId changed to String type
//   * inReplyToAccountId to String type
//   * poll changed to Poll type
//   * added text variable
//   * added edited_at variable
//   * changed emojis to CustomEmoji type
//   * changed tags to StatusTag
//   * changed mentions to StatusMention
//   * changed reblog to Status type
// NOTE: did NOT add pinned and filter (optional/not needed)


package edu.sjsu.moth.generated;

import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import edu.sjsu.moth.server.db.Account;
import edu.sjsu.moth.server.db.CustomEmoji;
import edu.sjsu.moth.server.db.StatusMention;
import edu.sjsu.moth.server.db.StatusTag;

@JsonInclude(JsonInclude.Include.NON_NULL)
@JsonPropertyOrder({
    "id",
    "created_at",
    "in_reply_to_id",
    "in_reply_to_account_id",
    "sensitive",
    "spoiler_text",
    "visibility",
    "language",
    "uri",
    "url",
    "replies_count",
    "reblogs_count",
    "favourites_count",
    "favourited",
    "reblogged",
    "muted",
    "bookmarked",
    "content",
    "reblog",
    "application",
    "account",
    "media_attachments",
    "mentions",
    "tags",
    "emojis",
    "card",
    "poll",
    "text",
    "edited_at",
})
public class Status {

    @JsonProperty("id")
    public String id;
    @JsonProperty("created_at")
    public String createdAt;
    @JsonProperty("in_reply_to_id")
    public String inReplyToId;
    @JsonProperty("in_reply_to_account_id")
    public String inReplyToAccountId;
    @JsonProperty("sensitive")
    public Boolean sensitive;
    @JsonProperty("spoiler_text")
    public String spoilerText;
    @JsonProperty("visibility")
    public String visibility;
    @JsonProperty("language")
    public String language;
    @JsonProperty("uri")
    public String uri;
    @JsonProperty("url")
    public String url;
    @JsonProperty("replies_count")
    public Integer repliesCount;
    @JsonProperty("reblogs_count")
    public Integer reblogsCount;
    @JsonProperty("favourites_count")
    public Integer favouritesCount;
    @JsonProperty("favourited")
    public Boolean favourited;
    @JsonProperty("reblogged")
    public Boolean reblogged;
    @JsonProperty("muted")
    public Boolean muted;
    @JsonProperty("bookmarked")
    public Boolean bookmarked;
    @JsonProperty("content")
    public String content;
    @JsonProperty("reblog")
    public Status reblog; //
    @JsonProperty("application")
    public Application application;
    @JsonProperty("account")
    public Account account;
    @JsonProperty("media_attachments")
    public List<MediaAttachment> mediaAttachments = new ArrayList<MediaAttachment>();
    @JsonProperty("mentions")
    public List<StatusMention> mentions = new ArrayList<StatusMention>();
    @JsonProperty("tags")
    public List<StatusTag> tags = new ArrayList<StatusTag>();
    @JsonProperty("emojis")
    public List<CustomEmoji> emojis = new ArrayList<CustomEmoji>();
    @JsonProperty("card")
    public Card card;
    @JsonProperty("poll")
    public Poll poll;
    @JsonProperty("text")
    public String text;
    @JsonProperty("edited_at")
    public String edited_at;


    /**
     * No args constructor for use in serialization
     * 
     */
    public Status() {
    }

    public Status(String id, String createdAt, String inReplyToId, String inReplyToAccountId, Boolean sensitive, String spoilerText, String visibility, String language, String uri, String url, Integer repliesCount, Integer reblogsCount, Integer favouritesCount, Boolean favourited, Boolean reblogged, Boolean muted, Boolean bookmarked, String content, Status reblog, Application application, Account account, List<MediaAttachment> mediaAttachments, List<StatusMention> mentions, List<StatusTag> tags, List<CustomEmoji> emojis, Card card, Poll poll, String text, String edited_at) {
        super();
        this.id = id;
        this.createdAt = createdAt;
        this.inReplyToId = inReplyToId;
        this.inReplyToAccountId = inReplyToAccountId;
        this.sensitive = sensitive;
        this.spoilerText = spoilerText;
        this.visibility = visibility;
        this.language = language;
        this.uri = uri;
        this.url = url;
        this.repliesCount = repliesCount;
        this.reblogsCount = reblogsCount;
        this.favouritesCount = favouritesCount;
        this.favourited = favourited;
        this.reblogged = reblogged;
        this.muted = muted;
        this.bookmarked = bookmarked;
        this.content = content;
        this.reblog = reblog;
        this.application = application;
        this.account = account;
        this.mediaAttachments = mediaAttachments;
        this.mentions = mentions;
        this.tags = tags;
        this.emojis = emojis;
        this.card = card;
        this.poll = poll;
        this.text = text;
        this.edited_at = edited_at;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(Status.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
        sb.append("id");
        sb.append('=');
        sb.append(((this.id == null)?"<null>":this.id));
        sb.append(',');
        sb.append("createdAt");
        sb.append('=');
        sb.append(((this.createdAt == null)?"<null>":this.createdAt));
        sb.append(',');
        sb.append("inReplyToId");
        sb.append('=');
        sb.append(((this.inReplyToId == null)?"<null>":this.inReplyToId));
        sb.append(',');
        sb.append("inReplyToAccountId");
        sb.append('=');
        sb.append(((this.inReplyToAccountId == null)?"<null>":this.inReplyToAccountId));
        sb.append(',');
        sb.append("sensitive");
        sb.append('=');
        sb.append(((this.sensitive == null)?"<null>":this.sensitive));
        sb.append(',');
        sb.append("spoilerText");
        sb.append('=');
        sb.append(((this.spoilerText == null)?"<null>":this.spoilerText));
        sb.append(',');
        sb.append("visibility");
        sb.append('=');
        sb.append(((this.visibility == null)?"<null>":this.visibility));
        sb.append(',');
        sb.append("language");
        sb.append('=');
        sb.append(((this.language == null)?"<null>":this.language));
        sb.append(',');
        sb.append("uri");
        sb.append('=');
        sb.append(((this.uri == null)?"<null>":this.uri));
        sb.append(',');
        sb.append("url");
        sb.append('=');
        sb.append(((this.url == null)?"<null>":this.url));
        sb.append(',');
        sb.append("repliesCount");
        sb.append('=');
        sb.append(((this.repliesCount == null)?"<null>":this.repliesCount));
        sb.append(',');
        sb.append("reblogsCount");
        sb.append('=');
        sb.append(((this.reblogsCount == null)?"<null>":this.reblogsCount));
        sb.append(',');
        sb.append("favouritesCount");
        sb.append('=');
        sb.append(((this.favouritesCount == null)?"<null>":this.favouritesCount));
        sb.append(',');
        sb.append("favourited");
        sb.append('=');
        sb.append(((this.favourited == null)?"<null>":this.favourited));
        sb.append(',');
        sb.append("reblogged");
        sb.append('=');
        sb.append(((this.reblogged == null)?"<null>":this.reblogged));
        sb.append(',');
        sb.append("muted");
        sb.append('=');
        sb.append(((this.muted == null)?"<null>":this.muted));
        sb.append(',');
        sb.append("bookmarked");
        sb.append('=');
        sb.append(((this.bookmarked == null)?"<null>":this.bookmarked));
        sb.append(',');
        sb.append("content");
        sb.append('=');
        sb.append(((this.content == null)?"<null>":this.content));
        sb.append(',');
        sb.append("reblog");
        sb.append('=');
        sb.append(((this.reblog == null)?"<null>":this.reblog));
        sb.append(',');
        sb.append("application");
        sb.append('=');
        sb.append(((this.application == null)?"<null>":this.application));
        sb.append(',');
        sb.append("account");
        sb.append('=');
        sb.append(((this.account == null)?"<null>":this.account));
        sb.append(',');
        sb.append("mediaAttachments");
        sb.append('=');
        sb.append(((this.mediaAttachments == null)?"<null>":this.mediaAttachments));
        sb.append(',');
        sb.append("mentions");
        sb.append('=');
        sb.append(((this.mentions == null)?"<null>":this.mentions));
        sb.append(',');
        sb.append("tags");
        sb.append('=');
        sb.append(((this.tags == null)?"<null>":this.tags));
        sb.append(',');
        sb.append("emojis");
        sb.append('=');
        sb.append(((this.emojis == null)?"<null>":this.emojis));
        sb.append(',');
        sb.append("card");
        sb.append('=');
        sb.append(((this.card == null)?"<null>":this.card));
        sb.append(',');
        sb.append("poll");
        sb.append('=');
        sb.append(((this.poll == null)?"<null>":this.poll));
        sb.append(',');
        sb.append("text");
        sb.append('=');
        sb.append(((this.text == null)?"<null>":this.text));
        sb.append(',');
        sb.append("edited_at");
        sb.append('=');
        sb.append(((this.edited_at == null)?"<null>":this.edited_at));
        sb.append(',');
        if (sb.charAt((sb.length()- 1)) == ',') {
            sb.setCharAt((sb.length()- 1), ']');
        } else {
            sb.append(']');
        }
        return sb.toString();
    }

    @Override
    public int hashCode() {
        int result = 1;
        result = ((result* 31)+((this.spoilerText == null)? 0 :this.spoilerText.hashCode()));
        result = ((result* 31)+((this.reblogsCount == null)? 0 :this.reblogsCount.hashCode()));
        result = ((result* 31)+((this.language == null)? 0 :this.language.hashCode()));
        result = ((result* 31)+((this.poll == null)? 0 :this.poll.hashCode()));
        result = ((result* 31)+((this.content == null)? 0 :this.content.hashCode()));
        result = ((result* 31)+((this.repliesCount == null)? 0 :this.repliesCount.hashCode()));
        result = ((result* 31)+((this.reblog == null)? 0 :this.reblog.hashCode()));
        result = ((result* 31)+((this.createdAt == null)? 0 :this.createdAt.hashCode()));
        result = ((result* 31)+((this.mediaAttachments == null)? 0 :this.mediaAttachments.hashCode()));
        result = ((result* 31)+((this.id == null)? 0 :this.id.hashCode()));
        result = ((result* 31)+((this.reblogged == null)? 0 :this.reblogged.hashCode()));
        result = ((result* 31)+((this.muted == null)? 0 :this.muted.hashCode()));
        result = ((result* 31)+((this.emojis == null)? 0 :this.emojis.hashCode()));
        result = ((result* 31)+((this.visibility == null)? 0 :this.visibility.hashCode()));
        result = ((result* 31)+((this.bookmarked == null)? 0 :this.bookmarked.hashCode()));
        result = ((result* 31)+((this.favouritesCount == null)? 0 :this.favouritesCount.hashCode()));
        result = ((result* 31)+((this.sensitive == null)? 0 :this.sensitive.hashCode()));
        result = ((result* 31)+((this.uri == null)? 0 :this.uri.hashCode()));
        result = ((result* 31)+((this.url == null)? 0 :this.url.hashCode()));
        result = ((result* 31)+((this.inReplyToId == null)? 0 :this.inReplyToId.hashCode()));
        result = ((result* 31)+((this.tags == null)? 0 :this.tags.hashCode()));
        result = ((result* 31)+((this.application == null)? 0 :this.application.hashCode()));
        result = ((result* 31)+((this.favourited == null)? 0 :this.favourited.hashCode()));
        result = ((result* 31)+((this.mentions == null)? 0 :this.mentions.hashCode()));
        result = ((result* 31)+((this.inReplyToAccountId == null)? 0 :this.inReplyToAccountId.hashCode()));
        result = ((result* 31)+((this.account == null)? 0 :this.account.hashCode()));
        result = ((result* 31)+((this.card == null)? 0 :this.card.hashCode()));
        result = ((result* 31)+((this.text == null)? 0 :this.text.hashCode()));
        result = ((result* 31)+((this.edited_at == null)? 0 :this.edited_at.hashCode()));

        return result;
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Status) == false) {
            return false;
        }
        Status rhs = ((Status) other);
        return ((((((((((((((((((((((((((((this.spoilerText == rhs.spoilerText)||((this.spoilerText!= null)&&this.spoilerText.equals(rhs.spoilerText)))&&((this.reblogsCount == rhs.reblogsCount)||((this.reblogsCount!= null)&&this.reblogsCount.equals(rhs.reblogsCount))))&&((this.language == rhs.language)||((this.language!= null)&&this.language.equals(rhs.language))))&&((this.poll == rhs.poll)||((this.poll!= null)&&this.poll.equals(rhs.poll))))&&((this.content == rhs.content)||((this.content!= null)&&this.content.equals(rhs.content))))&&((this.repliesCount == rhs.repliesCount)||((this.repliesCount!= null)&&this.repliesCount.equals(rhs.repliesCount))))&&((this.reblog == rhs.reblog)||((this.reblog!= null)&&this.reblog.equals(rhs.reblog))))&&((this.createdAt == rhs.createdAt)||((this.createdAt!= null)&&this.createdAt.equals(rhs.createdAt))))&&((this.mediaAttachments == rhs.mediaAttachments)||((this.mediaAttachments!= null)&&this.mediaAttachments.equals(rhs.mediaAttachments))))&&((this.id == rhs.id)||((this.id!= null)&&this.id.equals(rhs.id))))&&((this.reblogged == rhs.reblogged)||((this.reblogged!= null)&&this.reblogged.equals(rhs.reblogged))))&&((this.muted == rhs.muted)||((this.muted!= null)&&this.muted.equals(rhs.muted))))&&((this.emojis == rhs.emojis)||((this.emojis!= null)&&this.emojis.equals(rhs.emojis))))&&((this.visibility == rhs.visibility)||((this.visibility!= null)&&this.visibility.equals(rhs.visibility))))&&((this.bookmarked == rhs.bookmarked)||((this.bookmarked!= null)&&this.bookmarked.equals(rhs.bookmarked))))&&((this.favouritesCount == rhs.favouritesCount)||((this.favouritesCount!= null)&&this.favouritesCount.equals(rhs.favouritesCount))))&&((this.sensitive == rhs.sensitive)||((this.sensitive!= null)&&this.sensitive.equals(rhs.sensitive))))&&((this.uri == rhs.uri)||((this.uri!= null)&&this.uri.equals(rhs.uri))))&&((this.url == rhs.url)||((this.url!= null)&&this.url.equals(rhs.url))))&&((this.inReplyToId == rhs.inReplyToId)||((this.inReplyToId!= null)&&this.inReplyToId.equals(rhs.inReplyToId))))&&((this.tags == rhs.tags)||((this.tags!= null)&&this.tags.equals(rhs.tags))))&&((this.application == rhs.application)||((this.application!= null)&&this.application.equals(rhs.application))))&&((this.favourited == rhs.favourited)||((this.favourited!= null)&&this.favourited.equals(rhs.favourited))))&&((this.mentions == rhs.mentions)||((this.mentions!= null)&&this.mentions.equals(rhs.mentions))))&&((this.inReplyToAccountId == rhs.inReplyToAccountId)||((this.inReplyToAccountId!= null)&&this.inReplyToAccountId.equals(rhs.inReplyToAccountId))))&&((this.account == rhs.account)||((this.account!= null)&&this.account.equals(rhs.account))))&&((this.card == rhs.card)||((this.card!= null)&&this.card.equals(rhs.card))));
    }

}
